#!/bin/bash
set -e

# Dreamhost deployment script for Family Photo Album
# Run from within the family-photo-album directory
#
# USAGE:
#   ./deploy.sh              - Smart deployment (excludes vendor/, ~500KB)
#   ./deploy.sh --full       - Full deployment (includes vendor/, ~9MB)
#   ./deploy.sh --vendor-only - Upload only vendor dependencies (~6MB)
#
# WORKFLOW:
#   First deployment:        ./deploy.sh --full
#   Regular updates:         ./deploy.sh
#   After composer changes:  ./deploy.sh --vendor-only && ./deploy.sh

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

CONFIG_FILE=".deploy-config"
BUILD_DIR=".deploy-build"

# Parse command line arguments
FULL_DEPLOY=false
VENDOR_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --full)
            FULL_DEPLOY=true
            shift
            ;;
        --vendor-only)
            VENDOR_ONLY=true
            shift
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            echo "Usage: $0 [--full] [--vendor-only]"
            echo "  --full        : Full deployment (includes vendor/)"
            echo "  --vendor-only : Upload only vendor dependencies"
            exit 1
            ;;
    esac
done

if [ "$VENDOR_ONLY" = true ]; then
    echo -e "${YELLOW}📦 Starting vendor-only upload...${NC}"
else
    echo -e "${YELLOW}🚀 Starting Dreamhost deployment...${NC}"
fi

# Check if we're in the right directory
if [ ! -f "composer.json" ] || [ ! -f "artisan" ]; then
    echo -e "${RED}❌ Please run this script from the family-photo-album directory${NC}"
    exit 1
fi

# Load or prompt for configuration
if [ -f "$CONFIG_FILE" ]; then
    echo -e "${BLUE}📋 Loading deployment configuration...${NC}"
    source "$CONFIG_FILE"
    echo -e "${GREEN}✅ Using server: $DEPLOY_USERNAME@$DEPLOY_HOST${NC}"
else
    echo -e "${YELLOW}⚙️  First-time setup: Please enter your deployment details${NC}"
    
    read -p "Dreamhost username: " DEPLOY_USERNAME
    read -p "Dreamhost hostname (e.g., yoursite.com): " DEPLOY_HOST
    read -p "Domain directory name (e.g., yourphotosite.com): " DOMAIN_DIR
    
    # Save configuration
    cat > "$CONFIG_FILE" << EOF
# Dreamhost deployment configuration
# Generated by deploy.sh - edit as needed
DEPLOY_USERNAME="$DEPLOY_USERNAME"
DEPLOY_HOST="$DEPLOY_HOST"
DOMAIN_DIR="$DOMAIN_DIR"
EOF
    
    echo -e "${GREEN}✅ Configuration saved to $CONFIG_FILE${NC}"
fi

# Skip build steps for vendor-only uploads
# Prepare build artifacts in an isolated directory to avoid touching local dev deps
if [ "$VENDOR_ONLY" = true ]; then
    echo -e "${YELLOW}🧱 Preparing vendor-only build in $BUILD_DIR...${NC}"
    rm -rf "$BUILD_DIR"
    mkdir -p "$BUILD_DIR"

    # Only composer files are needed to generate vendor/
    cp composer.json composer.lock "$BUILD_DIR/"

    echo -e "${YELLOW}📦 Installing Composer production dependencies...${NC}"
    composer install --no-dev --optimize-autoloader --working-dir="$BUILD_DIR"

    echo -e "${YELLOW}📤 Uploading vendor dependencies to $DEPLOY_USERNAME@$DEPLOY_HOST...${NC}"
    rsync -avz \
        --checksum \
        --delete \
        "$BUILD_DIR/vendor/" "$DEPLOY_USERNAME@$DEPLOY_HOST:~/family-photo-album/vendor/"

    echo -e "${GREEN}✅ Vendor dependencies updated!${NC}"
    echo -e "${BLUE}💡 Run a normal deployment to update your application files${NC}"

    # Clean up build dir for vendor-only flow
    rm -rf "$BUILD_DIR"
    exit 0
else
    echo -e "${YELLOW}🏗️  Building assets...${NC}"
    npm run build

    echo -e "${YELLOW}🧱 Preparing isolated build directory at $BUILD_DIR...${NC}"
    rm -rf "$BUILD_DIR"
    mkdir -p "$BUILD_DIR"

    # Copy project into build dir excluding local-only artifacts
    rsync -avz \
        --exclude='.git/' \
        --exclude='.env' \
        --exclude='.deploy-config' \
        --exclude='node_modules/' \
        --exclude='.deploy-build/' \
        --exclude='database/database.sqlite' \
        --exclude='storage/app/public/photos/' \
        --exclude='storage/framework/views/*.php' \
        --exclude='storage/framework/cache/data/*' \
        --exclude='storage/framework/sessions/*' \
        --exclude='storage/logs/*.log' \
        --exclude='public/storage' \
        --exclude='tests/' \
        --exclude='.DS_Store' \
        ./ "$BUILD_DIR/"

    echo -e "${YELLOW}📦 Installing Composer production dependencies into build...${NC}"
    composer install --no-dev --optimize-autoloader --working-dir="$BUILD_DIR"
fi

# Deploy to server (from isolated build directory)
if [ "$FULL_DEPLOY" = true ]; then
    echo -e "${YELLOW}📤 Full upload to $DEPLOY_USERNAME@$DEPLOY_HOST...${NC}"
    
    # Full deployment with all files including vendor
    rsync -avz \
        --exclude='.git/' \
        --exclude='.env' \
        --exclude='.deploy-config' \
        --exclude='node_modules/' \
        --exclude='.deploy-build/' \
        --exclude='database/database.sqlite' \
        --exclude='storage/app/public/photos/' \
        --exclude='storage/framework/views/*.php' \
        --exclude='storage/framework/cache/data/*' \
        --exclude='storage/framework/sessions/*' \
        --exclude='storage/logs/*.log' \
        --exclude='public/storage' \
        --exclude='tests/' \
        --exclude='.DS_Store' \
        "$BUILD_DIR/" "$DEPLOY_USERNAME@$DEPLOY_HOST:~/temp-upload/"
else
    echo -e "${YELLOW}📤 Smart upload to $DEPLOY_USERNAME@$DEPLOY_HOST (excluding vendor/)...${NC}"
    
    # Smart deployment - exclude vendor, use checksums for efficiency
    rsync -avz \
        --checksum \
        --exclude='.git/' \
        --exclude='.env' \
        --exclude='.deploy-config' \
        --exclude='node_modules/' \
        --exclude='.deploy-build/' \
        --exclude='vendor/' \
        --exclude='database/database.sqlite' \
        --exclude='storage/app/public/photos/' \
        --exclude='storage/framework/views/*.php' \
        --exclude='storage/framework/cache/data/*' \
        --exclude='storage/framework/sessions/*' \
        --exclude='storage/logs/*.log' \
        --exclude='public/storage' \
        --exclude='tests/' \
        --exclude='.DS_Store' \
        "$BUILD_DIR/" "$DEPLOY_USERNAME@$DEPLOY_HOST:~/temp-upload/"
fi

# Upload server-specific files (skip for vendor-only uploads)
if [ "$VENDOR_ONLY" = false ]; then
    echo -e "${YELLOW}📤 Uploading server-specific files...${NC}"
    rsync -avz server-files/ "$DEPLOY_USERNAME@$DEPLOY_HOST:~/server-files/"
fi

echo -e "${GREEN}✅ Upload complete!${NC}"

# Clean up build directory after deployment
rm -rf "$BUILD_DIR"

if [ "$FULL_DEPLOY" = true ]; then
    echo -e "${YELLOW}📋 Next steps (Full Deployment):${NC}"
    echo -e "   1. SSH into your server: ${BLUE}ssh $DEPLOY_USERNAME@$DEPLOY_HOST${NC}"
    echo -e "   2. Run the update script: ${BLUE}~/update-photo-album.sh${NC}"
else
    echo -e "${YELLOW}📋 Next steps (Smart Deployment):${NC}"
    echo -e "   1. SSH into your server: ${BLUE}ssh $DEPLOY_USERNAME@$DEPLOY_HOST${NC}"
    echo -e "   2. Run the update script: ${BLUE}~/update-photo-album.sh${NC}"
    echo -e "${BLUE}💡 Note: Vendor dependencies were not uploaded (use --vendor-only first if needed)${NC}"
fi

echo ""
echo -e "${GREEN}🎉 Deployment ready!${NC}"