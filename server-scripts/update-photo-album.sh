#!/bin/bash
set -e

# Family Photo Album server update script
# Upload this to ~/update-photo-album.sh on your Dreamhost server

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

CONFIG_FILE="$HOME/photo-album-server-config"

echo -e "${YELLOW}üîÑ Starting Family Photo Album update...${NC}"

# Check if temp-upload exists
if [ ! -d "temp-upload" ]; then
    echo -e "${RED}‚ùå No temp-upload directory found. Please run deploy.sh first.${NC}"
    exit 1
fi

# Load or prompt for server configuration
if [ -f "$CONFIG_FILE" ]; then
    echo -e "${BLUE}üìã Loading server configuration...${NC}"
    source "$CONFIG_FILE"
    echo -e "${GREEN}‚úÖ Using domain directory: $DOMAIN_DIR${NC}"
    
    # Safety confirmation
    read -p "Deploy to $DOMAIN_DIR? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Deployment cancelled by user${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚öôÔ∏è  First-time server setup: Please configure your deployment${NC}"
    echo -e "${RED}üö® IMPORTANT: This will copy files to your web directory!${NC}"
    echo ""
    
    # Show available directories
    echo -e "${BLUE}üìÅ Available directories in your home folder:${NC}"
    ls -d */ 2>/dev/null | grep -E '\.(com|org|net)/' || echo "   (No domain directories found)"
    echo ""
    
    read -p "Enter your photo album domain directory (e.g., myfamilyphotos.com): " DOMAIN_DIR
    
    # Validate directory exists
    if [ ! -d "$DOMAIN_DIR" ]; then
        echo -e "${RED}‚ùå Directory '$DOMAIN_DIR' not found!${NC}"
        echo -e "${BLUE}üí° Create it first: mkdir $DOMAIN_DIR${NC}"
        exit 1
    fi
    
    # Final safety check
    echo -e "${YELLOW}‚ö†Ô∏è  This will copy Laravel public files to: $DOMAIN_DIR${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This will overwrite index.php and other files in that directory!${NC}"
    read -p "Are you sure this is correct? Type 'yes' to continue: " CONFIRM
    
    if [ "$CONFIRM" != "yes" ]; then
        echo -e "${RED}‚ùå Deployment cancelled for safety${NC}"
        exit 1
    fi
    
    # Save configuration
    cat > "$CONFIG_FILE" << EOF
# Photo Album server configuration
# Generated by update-photo-album.sh - edit as needed
DOMAIN_DIR="$DOMAIN_DIR"
EOF
    
    echo -e "${GREEN}‚úÖ Configuration saved to $CONFIG_FILE${NC}"
fi

# Get database credentials from existing .env if it exists
if [ -f "family-photo-album/.env" ]; then
    DB_HOST=$(grep DB_HOST family-photo-album/.env | cut -d '=' -f2 | tr -d '"' | tr -d ' ')
    DB_DATABASE=$(grep DB_DATABASE family-photo-album/.env | cut -d '=' -f2 | tr -d '"' | tr -d ' ')
    DB_USERNAME=$(grep DB_USERNAME family-photo-album/.env | cut -d '=' -f2 | tr -d '"' | tr -d ' ')
    DB_PASSWORD=$(grep DB_PASSWORD family-photo-album/.env | cut -d '=' -f2 | tr -d '"' | tr -d ' ')
fi

# Backup database if credentials exist
if [ -n "$DB_HOST" ] && [ -n "$DB_USERNAME" ] && [ -n "$DB_PASSWORD" ] && [ -n "$DB_DATABASE" ]; then
    echo -e "${YELLOW}üì¶ Backing up database...${NC}"
    mkdir -p ~/backups
    
    # Use safer mysqldump options for shared hosting
    if mysqldump -h "$DB_HOST" -u "$DB_USERNAME" -p"$DB_PASSWORD" \
        --single-transaction \
        --routines \
        --triggers \
        --no-tablespaces \
        --skip-lock-tables \
        "$DB_DATABASE" > ~/backups/db-$(date +%Y%m%d-%H%M%S).sql 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Database backed up${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Database backup failed (insufficient privileges), continuing deployment...${NC}"
        echo -e "${BLUE}üí° Consider manually backing up your database before deployments${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Skipping database backup (no existing .env found)${NC}"
fi

# Backup current version
echo -e "${YELLOW}üíæ Backing up current version...${NC}"
rm -rf family-photo-album-backup
if [ -d "family-photo-album" ]; then
    mv family-photo-album family-photo-album-backup
    echo -e "${GREEN}‚úÖ Current version backed up${NC}"
fi

# Move new version into place
echo -e "${YELLOW}üìÅ Installing new version...${NC}"
mv temp-upload family-photo-album

# Preserve .env file from backup if it exists
if [ -f "family-photo-album-backup/.env" ]; then
    echo -e "${BLUE}üìù Restoring .env file from backup...${NC}"
    cp family-photo-album-backup/.env family-photo-album/.env
    echo -e "${GREEN}‚úÖ .env file restored${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No .env file found in backup${NC}"
fi

# Preserve photos from backup if they exist
if [ -d "family-photo-album-backup/storage/app/public/photos" ]; then
    echo -e "${BLUE}üì∏ Restoring photos from backup...${NC}"
    mkdir -p family-photo-album/storage/app/public/photos
    cp -r family-photo-album-backup/storage/app/public/photos/* family-photo-album/storage/app/public/photos/
    echo -e "${GREEN}‚úÖ Photos restored${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No photos found in backup - creating directory structure${NC}"
    mkdir -p family-photo-album/storage/app/public/photos/originals
    mkdir -p family-photo-album/storage/app/public/photos/thumbnails
fi

# Ensure correct permissions on photos directory
chmod -R 755 family-photo-album/storage/app/public/photos

# Run migrations if we have a .env file
echo -e "${YELLOW}üóÉÔ∏è  Running migrations...${NC}"
cd family-photo-album
if [ -f ".env" ]; then
    php artisan migrate --force
    echo -e "${GREEN}‚úÖ Migrations completed${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No .env file found - skipping migrations${NC}"
    echo -e "${BLUE}üìù Remember to create your .env file and run: php artisan migrate --force${NC}"
fi

# Copy public assets to domain directory
cd ..
echo -e "${YELLOW}üìÅ Copying public assets to $DOMAIN_DIR...${NC}"

# Safety check - make sure we're not copying to a system directory
case "$DOMAIN_DIR" in
    /*|bin/*|usr/*|etc/*|var/*|root/*|home/*/.*) 
        echo -e "${RED}‚ùå SAFETY ABORT: $DOMAIN_DIR looks like a system directory!${NC}"
        exit 1
        ;;
esac

# Verify target directory still exists
if [ ! -d "$DOMAIN_DIR" ]; then
    echo -e "${RED}‚ùå Target directory $DOMAIN_DIR no longer exists!${NC}"
    exit 1
fi

# Show what will be copied
echo -e "${BLUE}üìã Files to copy:${NC}"
ls family-photo-album/public/

# Final confirmation before copying
echo ""
read -p "Copy these files to $DOMAIN_DIR? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  File copy cancelled by user${NC}"
    echo -e "${GREEN}üéâ Application update completed (without public file copy)${NC}"
    exit 0
fi

# Actually copy the files
cp -r family-photo-album/public/* "$DOMAIN_DIR/"

# Use server-specific index.php with correct paths
if [ -f "server-files/index.php" ]; then
    echo -e "${BLUE}üìù Installing server-specific index.php...${NC}"
    cp server-files/index.php "$DOMAIN_DIR/index.php"
    echo -e "${GREEN}‚úÖ Server-specific index.php installed${NC}"
fi

# Create correct storage symlink for Dreamhost structure
echo -e "${BLUE}üîó Creating storage symlink...${NC}"
rm -f "$DOMAIN_DIR/storage"
ln -sf "$HOME/family-photo-album/storage/app/public" "$DOMAIN_DIR/storage"
echo -e "${GREEN}‚úÖ Storage symlink created${NC}"

echo -e "${GREEN}‚úÖ Public assets updated in $DOMAIN_DIR${NC}"

echo ""
echo -e "${GREEN}üéâ Update complete!${NC}"
echo -e "${BLUE}üìã Summary:${NC}"
echo "   ‚Ä¢ Database: $([ -n "$DB_HOST" ] && echo "Backed up" || echo "Skipped")"
echo "   ‚Ä¢ Previous version: Backed up to family-photo-album-backup/"
echo "   ‚Ä¢ New version: Installed"
echo "   ‚Ä¢ Migrations: $([ -f "family-photo-album/.env" ] && echo "Completed" || echo "Skipped (no .env)")"
echo "   ‚Ä¢ Public assets: $([ -n "$DOMAIN_DIR" ] && echo "Updated" || echo "Manual step required")"